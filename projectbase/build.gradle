buildscript {
    ext.serenityCoreVersion = '3.3.0'   //extension a usar de serenity
    
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:$serenityCoreVersion")
        classpath "net.serenity-bdd:serenity-single-page-report:$serenityCoreVersion"
    }
}
plugins {
    id "net.serenity-bdd.serenity-gradle-plugin" version "${serenityCoreVersion}"
    id 'java'
    id 'eclipse'
    id 'idea'
}

defaultTasks 'clean','test','aggregate'                     //tareas por defecto para generar
apply plugin: 'net.serenity-bdd.serenity-gradle-plugin'     //descarga el plugin de serenity-bdd gradle

group 'co.com.screenplay.project'
version '1.0-SNAPSHOT'

compileJava.options.encoding = "UTF-8"                      //compilador reconozca signos especiales
compileTestJava.options.encoding = "UTF-8"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()              //la indexaci√≥n la realiza desde mavencentral
}

ext {                                           //versiones de las extenciones
    slf4jVersion = '1.7.7'
    serenityCoreVersion = '3.3.4'
    serenityCucumberVersion = '3.3.4'
    junitVersion = '5.8.2'
    assertJVersion = '3.22.0'
    logbackVersion = '1.2.10'
    lombokVersion = '1.18.22'
    log4jVersion = '2.17.1'
}

dependencies {                                                  // Dependencia a usar en el proyecto
    testImplementation ("net.serenity-bdd:serenity-core:${serenityCoreVersion}"){           // usa la misma version de las extensiones
        exclude group: 'org.apache.groovy', module: 'groovy'
    }
    implementation "net.serenity-bdd:serenity-ensure:${serenityCoreVersion}"
    implementation "net.serenity-bdd:serenity-junit5:${serenityCoreVersion}"
    implementation "net.serenity-bdd:serenity-cucumber:${serenityCucumberVersion}"
    implementation "net.serenity-bdd:serenity-screenplay:${serenityCoreVersion}"
    implementation "net.serenity-bdd:serenity-screenplay-webdriver:${serenityCoreVersion}"
    implementation "net.serenity-bdd:serenity-screenplay-rest:${serenityCoreVersion}"

    implementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    implementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    implementation "org.assertj:assertj-core:${assertJVersion}"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    implementation group: 'com.github.javafaker', name: 'javafaker', version: '1.0.2'

}
test {
    useJUnitPlatform()                          // compilacion del proyecto por medio de JUnit
    testLogging.showStandardStreams = true
    systemProperties System.getProperties()
}

serenity {
    testRoot = "co.com.screenplay.project.runners"              // Ruta de los runners
    requirementsBaseDir = "src/test/resources/features"         // Ruta del feature
    reports = ["single-page-html"]                              // Formato de los reportes
}

gradle.startParameter.continueOnFailure = true                  //Inicia la parametrizacion de gradle
test.finalizedBy(aggregate)